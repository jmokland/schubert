#
# zee(lambda) = the order of the S_n centralizer of a permutation of
#  cycle type lambda; i.e., 1^(m1)*m1!*2^(m2)*m2!*...
#
# zee(lambda,a)   = zee(lambda)*a^nops(lambda) 
# zee(lambda,q,t) = zee(lambda)*prod((1-q^(lambda_i))/(1-t^(lambda_i)))
#
`SF/zee`:=proc(mu) local res,m,i;
  m:=1; res:=convert(mu,`*`);
  if nargs=2 then
    res:=res*args[2]^nops(mu)
  elif nargs=3 then 
    res:=res*convert([seq((1-args[2]^i)/(1-args[3]^i),i=mu)],`*`)
  fi;
  for i from 2 to nops(mu) do
    if mu[i]<mu[i-1] then m:=1 else m:=m+1 fi;
    res:=res*m;
  od; res
end:
#
save `SF/zee`, cat(HomeLib,`/SF/zee.m`);
read cat(HomeLib,`/help/SF/zee`);
quit;

